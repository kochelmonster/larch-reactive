>>> from __future__ import print_function
>>> 
>>> # <start example1>
>>> import larch.reactive as ra
>>> from datetime import datetime, timedelta
>>> 
>>> @ra.reactive
... class Task(object):
...     start = ra.Cell(datetime.now())
...     end = ra.Cell()
...     duration = ra.Cell(timedelta(hours=3))
...     prev = ra.Cell()
...     desc = ra.Cell("")
...     
...     @ra.rule
...     def _rule_start(self):
...         if self.prev:
...             self.start = self.prev.end
...     
...     @ra.rule
...     def _rule_end(self):
...         self.end = self.start + self.duration
...     
...     def __repr__(self):
...         return "'{}': {} -> {}".format(self.desc, self.start, self.end)
... 
>>> read = Task(desc="read tutorial", start=datetime(2016, 1, 9, 8),
...             duration=timedelta(hours=2))
>>> read
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 10:00:00
>>> write = Task(desc="write own programs", prev=read)
>>> write
'write own programs': 2016-01-09 10:00:00 -> 2016-01-09 13:00:00
>>> read.duration = timedelta(hours=3)
>>> read
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 11:00:00
>>> write
'write own programs': 2016-01-09 11:00:00 -> 2016-01-09 14:00:00
>>> # <end example1>
>>> 
>>> 
>>> # <start TypeCell>
>>> @ra.reactive
... class Point(object):
...     x = ra.TypeCell(0)
...     y = ra.TypeCell(0, converter=float)
... 
>>> p = Point(x="1", y="2")
>>> p.x
1
>>> p.y
2.0
>>> # <end TypeCell>
>>> 
>>> 
>>> # <start makecell>
>>> @ra.reactive
... class ListContainer(object):
...     values = ra.MakeCell(list, (1, 2, 3))
... 
>>> lc = ListContainer()
>>> lc.values
[1, 2, 3]
>>> # <end makecell>
>>> 
>>> 
>>> # <start StartObserver>
>>> @ra.reactive
... class StartObserver(object):
...     subject = ra.Cell()
...     
...     @ra.rule
...     def _rule_print(self):
...         print("start:", self.subject.start)
... 
>>> observer = StartObserver(subject=write)
start: 2016-01-09 11:00:00
>>> read.start += timedelta(hours=0.5)
start: 2016-01-09 11:30:00
>>> del observer  # deactivate observer
>>> # <end StartObserver>
>>> 
>>> 
>>> # <start ProxyObserver>
>>> @ra.reactive
... class ProxyObserver(object):
...     subject = ra.Cell()
...     
...     @ra.rule
...     def _rule_print(self):
...         print("attribute:", repr(self.subject), self.subject())
... 
>>> observer = ProxyObserver(subject=ra.Proxy(write).start)
attribute: <Proxy-'write own programs': 2016-01-09 11:30:00 -> 2016-01-09 14:30:00.start> 2016-01-09 11:30:00
>>> read.start += timedelta(hours=0.5)
attribute: <Proxy-'write own programs': 2016-01-09 12:00:00 -> 2016-01-09 15:00:00.start> 2016-01-09 12:00:00
>>> # <end ProxyObserver>
>>> 
>>> # <start get-proxy-value>
>>> ra.Proxy(write).start() == write.start
True
>>> # <end get-proxy-value>
>>> 
>>> # <start set-proxy-value>
>>> ra.Proxy(read).start(datetime(2016, 2, 9, 11))
attribute: <Proxy-'write own programs': 2016-02-09 14:00:00 -> 2016-02-09 17:00:00.start> 2016-02-09 14:00:00
>>> # <end set-proxy-value>
>>> 
>>> # <start proxy-expressions>
>>> # prints write.start + 30min
>>> observer = ProxyObserver(subject=ra.Proxy(write).start + timedelta(minutes=30))
attribute: <Proxy-add('write own programs': 2016-02-09 14:00:00 -> 2016-02-09 17:00:00.start, datetime.timedelta(0, 1800))> 2016-02-09 14:30:00
>>> 
>>> # prints the maximum of read.end and write.end
>>> observer = ProxyObserver(subject=ra.ProxyExpression.call(
...     max, ra.Proxy(read).end, ra.Proxy(write).end))
attribute: <Proxy-max('read tutorial': 2016-02-09 11:00:00 -> 2016-02-09 14:00:00.end, 'write own programs': 2016-02-09 14:00:00 -> 2016-02-09 17:00:00.end)> 2016-02-09 17:00:00
>>> del observer  # deactivate observer
>>> # <end proxy-expressions>
>>> 
>>> 
>>> # <start ProxyTask>
>>> @ra.reactive
... class ProxyTask(object):
...     start = ra.TypeCell(ra.Proxy(datetime.now()), converter=ra.Proxy)
...     end = ra.Cell()
...     duration = ra.TypeCell(ra.Proxy(timedelta(hours=3)), converter=ra.Proxy)
...     desc = ra.Cell("")
...     
...     @ra.rule
...     def _rule_end(self):
...         self.end = self.start() + self.duration()
...     
...     def __repr__(self):
...         return "'{}': {} -> {}".format(self.desc, self.start(), self.end)
... 
>>> pread = ProxyTask(desc="read tutorial", start=datetime(2016, 1, 9, 8),
...                   duration=timedelta(hours=2))
>>> pwrite = ProxyTask(desc="write own programs", start=ra.Proxy(pread).end)
>>> pread
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 10:00:00
>>> pwrite
'write own programs': 2016-01-09 10:00:00 -> 2016-01-09 13:00:00
>>> # <end ProxyTask>
>>> 
>>> 
>>> # <start trivial-delegator>
>>> @ra.reactive
... class TaskPrinter(object):
...     task = ra.Cell()
...     # make task attributes to my own
...     start = ra.SELF.task.start
...     end = ra.SELF.task.end
...     desc = ra.SELF.task.desc
...     
...     @ra.rule
...     def _rule_print(self):
...         print("'{}': {} -> {}".format(self.desc, self.start, self.end))
... 
>>> printer = TaskPrinter(task=write)
'write own programs': 2016-02-09 14:00:00 -> 2016-02-09 17:00:00
>>> del printer  # deactivate printer
>>> # <end trivial-delegator>
>>> 
>>> 
>>> # <start atomic>
>>> printer = TaskPrinter(task=read)
'read tutorial': 2016-02-09 11:00:00 -> 2016-02-09 14:00:00
>>> 
>>> read.start = datetime(2016, 1, 8, 8)
'read tutorial': 2016-01-08 08:00:00 -> 2016-01-08 11:00:00
>>> read.duration = timedelta(hours=2)
'read tutorial': 2016-01-08 08:00:00 -> 2016-01-08 10:00:00
>>> 
>>> with ra.atomic():
...     read.start = datetime(2016, 1, 9, 8)
...     read.duration = timedelta(hours=3)
... 
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 11:00:00
>>> del printer  # deactivate printer
>>> # <end atomic>
>>> 
>>> 
>>> # <start untouched>
>>> @ra.reactive
... class SillyTaskPrinter(object):
...     task = ra.Cell()
...     
...     @ra.rule
...     def _rule_print(self):
...         # this rule does not depend on self.task.end
...         with ra.untouched():
...             end = self.task.end
...         print("'{}': {} -> {}".format(self.task.desc, self.task.start, end))
... 
>>> printer = SillyTaskPrinter(task=read)
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 11:00:00
>>> read.duration = timedelta(hours=2.5)
>>> read.start = datetime(2016, 1, 8, 8)
'read tutorial': 2016-01-08 08:00:00 -> 2016-01-09 10:30:00
>>> 
>>> del printer  # deactivate printer
>>> # <end untouched>
>>> 
>>> # <start silent>
>>> with ra.silent():
...     read.start = datetime(2016, 1, 9, 8)
... 
>>> read
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-08 10:30:00
>>> 
>>> read._rule_end()
>>> read
'read tutorial': 2016-01-09 08:00:00 -> 2016-01-09 10:30:00
>>> # <end silent>
>>> 
>>> 
>>> # <start yield-rule>
>>> @ra.reactive
... class TaskObserver(object):
...     task = ra.Cell()
...     
...     @ra.rule
...     def _rule_trigger_action(self):
...         self.task.end  # touch without using the value
...         yield
...         # many operations using different cells
...         # the rule does not depend on these cells
... # <end yield-rule>
... 
>>> 
>>> # <start rule_start>
>>> @ra.reactive
... class RuleOrderDemo(object):
...     a = ra.Cell(0)
...     b = ra.Cell(0)
...     c = ra.Cell(0)
...     
...     @ra.rule
...     def _rule_first(self):
...         self.c = self.b + 1
...         print("rule first is called c =", self.c)
...     
...     @ra.rule
...     def _rule_second(self):
...         self.b = self.a + 1
...         print("rule second is called b =", self.b)
... 
>>> demo = RuleOrderDemo()
rule first is called c = 1
rule second is called b = 1
rule first is called c = 2
>>> demo.a, demo.b, demo.c
(0, 1, 2)
>>> # <end rule_start>
>>> 
>>> # <start rule_optimize>
>>> demo.a = 2
rule second is called b = 3
rule first is called c = 4
>>> # <end rule_optimize>
>>> 
>>> # <start rule_order>
>>> @ra.reactive
... class RuleOrderDemo(object):
...     a = ra.Cell(0)
...     b = ra.Cell(0)
...     c = ra.Cell(0)
...     
...     @ra.rule(2)
...     def _rule_first(self):
...         self.c = self.b + 1
...         print("rule first is called c =", self.c)
...     
...     @ra.rule(1)
...     def _rule_second(self):
...         self.b = self.a + 1
...         print("rule second is called b =", self.b)
... 
>>> demo = RuleOrderDemo()
rule second is called b = 1
rule first is called c = 2
>>> # <end rule_order>
>>> 
>>> 
>>> # <start old_agent>
>>> @ra.reactive
... class TaskPrinter(object):
...     task = ra.Cell()
...     
...     @ra.rule
...     def _rule_print(self):
...         otask = ra.old(self.task)
...         if otask.start == self.task.start and otask.end == self.task.end:
...             return
...         print("'{}': {}({}) -> {}({})".format(
...             self.task.desc, self.task.start, otask.start,
...             self.task.end, otask.end))
... 
>>> printer = TaskPrinter(task=read)
>>> read.start = datetime(2016, 1, 8, 8)
'read tutorial': 2016-01-08 08:00:00(2016-01-09 08:00:00) -> 2016-01-08 10:30:00(2016-01-09 10:30:00)
>>> del printer  # deactivate printer
>>> # <end old_agent>
>>> 
>>> 
>>> # <start cell_agent>
>>> cread = ra.cell(read)
>>> cread.end
<Container(7fc2247a1ca8: datetime.datetime(2016, 1, 8, 10, 30)>
>>> cread.end.get_observers()
[<Rule _rule_start(0, 60) of 'write own programs': 2016-01-08 10:30:00 -> 2016-01-08 13:30:00>]
>>> cread.end.get_value()
datetime.datetime(2016, 1, 8, 10, 30)
>>> # <end cell_agent>
>>> 
>>> # <start list>
>>> @ra.reactive
... class ContainerObserver(object):
...     subject = ra.Cell()
...     
...     @ra.rule
...     def _rule_print_start(self):
...         print("action start:", self.subject.__action_start__)
...     
...     @ra.rule
...     def _rule_print_end(self):
...         print("action end:", self.subject.__action_end__)
... 
>>> from larch.reactive.rcollections import List
>>> container = List()
>>> observer = ContainerObserver(subject=container)
action start: None
action end: None
>>> 
>>> container.append(1)
action start: ('insert', (0, 1))
action end: ('insert', (0, 1))
>>> 
>>> container[0] = 2
action start: ('change', (slice(0, 1, None), [2]))
action end: ('change', (slice(0, 1, None), [2]))
>>> 
>>> container[:] = [1, 2, 3]
action start: ('change', (slice(0, 1, None), [1, 2, 3]))
action end: ('change', (slice(0, 1, None), [1, 2, 3]))
>>> 
>>> container.reverse()
action start: ('order', 'reverse')
action end: ('order', 'reverse')
>>> 
>>> container.sort()
action start: ('order', 'sort')
action end: ('order', 'sort')
>>> 
>>> container += [4, 5, 6]
action start: ('extend', [4, 5, 6])
action end: ('extend', [4, 5, 6])
>>> 
>>> container *= 2
action start: ('imul', 2)
action end: ('imul', 2)
>>> 
>>> del container[2:-2]
action start: ('delete', slice(2, 10, None))
action end: ('delete', slice(2, 10, None))
>>> # <end list>
>>> 
>>> # <start dict>
>>> from larch.reactive.rcollections import Dict
>>> container = Dict()
>>> observer = ContainerObserver(subject=container)
action start: None
action end: None
>>> 
>>> container[1] = "one"
action start: ('change', (1, 'one'))
action end: ('change', (1, 'one'))
>>> 
>>> container.update({2: "two", 3: "three"})
action start: ('update', (({2: 'two', 3: 'three'},), {}))
action end: ('update', (({2: 'two', 3: 'three'},), {}))
>>> 
>>> container.popitem()
action start: ('delete', 1)
action end: ('delete', 1)
(1, 'one')
>>> 
>>> container.clear()
action start: ('clear', None)
action end: ('clear', None)
>>> # <end dict>
